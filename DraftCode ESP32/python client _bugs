import paho.mqtt.client as mqtt
import time
import msvcrt

# MQTT Broker Configuration (Ensure IP matches ESP32 setup)
broker_address = "172.20.10.11"  # Replace with your ESP32 IP
broker_port = 1883
username = "alice"
password = "secret"

# MQTT Topics
station1_request_topic = "station1/request"
station1_response_topic = "station1/response"
station3_request_topic = "station3/request"
station3_response_topic = "station3/response"
reset_topic = "reset"

# ‚úÖ Initialize the MQTT Client
client = mqtt.Client()
client.username_pw_set(username, password)

# ‚úÖ Global Variables for Reset Control
reset_triggered = False


# ‚úÖ MQTT Callback: Handling Incoming Messages
def on_message(client, userdata, message):
    global reset_triggered
    payload = message.payload.decode("utf-8")
    print(f"\nüì© Received message from {message.topic}: {payload}")

    # ‚úÖ Reset Handling (From ESP32)
    if message.topic == reset_topic and payload == "RESET_TRIGGERED":
        print("‚ö†Ô∏è Reset Triggered from ESP32! Performing reset...")
        reset_triggered = True
        send_station1_response()

    # ‚úÖ Station 1 Request Handling
    elif message.topic == station1_request_topic:
        print("üì© ESP32 requested manual input for Station 1.")
        send_station1_response()

    # ‚úÖ Station 3 Request Handling
    elif message.topic == station3_request_topic:
        print("üì© ESP32 requested manual input for Station 3.")
        send_station3_feedback()


# ‚úÖ Connect to the MQTT Broker with Automatic Reconnection
def connect_to_broker():
    while True:
        try:
            client.connect(broker_address, broker_port)
            print(f"‚úÖ Connected to MQTT broker at {broker_address}")
            break
        except Exception as e:
            print(f"‚ö†Ô∏è Connection failed: {e}. Retrying in 5 seconds...")
            time.sleep(5)


# ‚úÖ Send Manual Input for Station 1 to ESP32
def send_station1_response():
    print("\nüåü Station 1 Response Options:")
    print("1: No Lens Holder")
    print("2: Perfect Solution")
    print("3: No Solution")
    print("4: Spill Solution")

    messages = {
        "1": "No Lens Holder",
        "2": "Perfect Solution",
        "3": "No Solution",
        "4": "Spill Solution"
    }

    print("\nEnter feedback for Station 1 (1-4): ", end="", flush=True)
    
    while True:
        choice = msvcrt.getch().decode('utf-8')
        if choice in messages:
            print(f"\n‚úÖ Sent feedback: '{messages[choice]}' to ESP32.")
            client.publish(station1_response_topic, messages[choice])
            print(f"‚úÖ Sent: '{messages[choice]}' to ESP32.")
            break
        else:
            print("‚ö†Ô∏è Invalid choice. Please try again.")


# ‚úÖ Send Manual Feedback for Station 3 to ESP32
def send_station3_feedback():
    print("\nüåü Station 3 Feedback Options:")
    print("1: No Lens Holder")
    print("2: Perfect Solution")
    print("3: No Solution")
    print("4: Spill Solution")

    feedback_map = {
        "1": "No Lens Holder",
        "2": "Perfect Solution",
        "3": "No Solution",
        "4": "Spill Solution"
    }

    print("\nEnter feedback for Station 3 (1-4): ", end="", flush=True)

    while True:
        choice = msvcrt.getch().decode('utf-8')
        if choice in feedback_map:
            print(f"\n‚úÖ Sent feedback: '{feedback_map[choice]}' to ESP32.")
            client.publish(station3_response_topic, feedback_map[choice])
            break
        else:
            print(f"\n‚ö†Ô∏è Invalid choice: {choice}. Please try again.")



# ‚úÖ Manual Reset Trigger from Python Client
def manual_reset():
    client.publish(reset_topic, "RESET_TRIGGERED")
    print("‚úÖ Manual Reset Triggered")


# ‚úÖ Main Function to Keep MQTT Client Active and Listening
def main():
    connect_to_broker()
    client.on_message = on_message

    # ‚úÖ Subscribe to MQTT Topics
    client.subscribe([
    (station1_request_topic, 0),  # Ensure this topic is included
    (station1_response_topic, 0),
    (station3_request_topic, 0),
    (reset_topic, 0)
    ])
    client.loop_start()  # Non-blocking loop to keep listening for messages

    try:
        print("üì° Waiting for ESP32 requests...")
        while True:
            # Optional Manual Control for Reset Triggering
            choice = input("\nPress 'r' to send a manual reset signal or 'q' to quit: ").strip().lower()
            if choice == 'r':
                manual_reset()
            elif choice == 'q':
                break
    except KeyboardInterrupt:
        print("üî¥ Interrupted by user. Disconnecting...")
    finally:
        client.disconnect()
        print("‚úÖ Disconnected from MQTT broker.")


# ‚úÖ Run the Main Function
if __name__ == "__main__":
    main()

