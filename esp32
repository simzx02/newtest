#include <Wire.h>
#include <LiquidCrystal_I2C.h>     // if you donÂ´t have I2C version of the display, use LiquidCrystal.h library instead

// Define I2C address for the LCD
LiquidCrystal_I2C lcd(0x27, 16, 2);

// Define pins
#define PC1_1 35
#define PC1_2 34
#define PC2_1 19
#define PC2_2 18
#define STATUS_LED1 25
#define STATUS_LED2 33
#define STATUS_LED3 32
#define RESET_BUTTON 27
#define PUMP 5
#define PNEUMATIC_PC1 17
#define PNEUMATIC_PC2 16

int complete = 0;

void setup() {
  // Initialize serial communication for debugging
  Serial.begin(9600);

  // Set pin modes
  pinMode(PC1_1, INPUT_PULLUP);//Limit switches
  pinMode(PC1_2, INPUT_PULLUP);
  pinMode(PC2_1, INPUT_PULLUP);
  pinMode(PC2_2, INPUT_PULLUP);
  pinMode(STATUS_LED1, OUTPUT);
  pinMode(STATUS_LED2, OUTPUT);
  pinMode(STATUS_LED3, OUTPUT);
  //pinMode(POWER_SWITCH, INPUT_PULLUP); No need power switch at controller
  // power switches ON, void setup() runs.
  pinMode(RESET_BUTTON, INPUT_PULLUP);
  pinMode(PUMP, OUTPUT);
  pinMode(PNEUMATIC_PC1, OUTPUT); // Pneumatic 1
  pinMode(PNEUMATIC_PC2, OUTPUT); // Pnumatic 2

  //Initialize Pump and Pneumatic signal
  digitalWrite(PUMP, LOW);
  digitalWrite(PNEUMATIC_PC1,LOW);
  digitalWrite(PNEUMATIC_PC2,LOW);

   // Initialize LCD
  lcd.init();
  lcd.backlight();
  lcd.setCursor(0, 0);
  lcd.print("Initializing");
  delay(200);

  // Blink all status LEDs three times
  for (int i = 0; i < 3; i++) {
    digitalWrite(STATUS_LED1, HIGH);
    digitalWrite(STATUS_LED2, HIGH);
    digitalWrite(STATUS_LED3, HIGH);
    lcd.print(".");
    delay(500); // LED on for 500ms
    digitalWrite(STATUS_LED1, LOW);
    digitalWrite(STATUS_LED2, LOW);
    digitalWrite(STATUS_LED3, LOW);
    delay(500); // LED off for 500ms
  }

  // Display a startup message
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("System Ready");
  delay(2000);
  //lcd.clear();
}

void loop() {
  // Reset if not at Station 1
  if (digitalRead(RESET_BUTTON) != HIGH) { //active low, rst when low
    Reset();
  }

  //printCurrentStation(1); //Print out>> Current Station: Station 1

  // Station 1: Loading and Machine Vision
  while (true) {
    if (digitalRead(RESET_BUTTON) == LOW) {
      Reset();
      return;
    }

    if (digitalRead(PC1_1) == HIGH ) { //&& the load is entered >> need add here
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Processing:");
      delay(1000);
      lcd.setCursor(0, 1);
      lcd.print("Station 1-->2");
      delay(1000);
      digitalWrite(STATUS_LED1, HIGH);
      digitalWrite(PNEUMATIC_PC1, HIGH);
      
      moveToStation2();
      digitalWrite(STATUS_LED1, LOW);
      break;
    }
  }
  // Reset
  if (digitalRead(RESET_BUTTON) != HIGH) { //active low, rst when low, rst when pressed
    Reset();
    return;
  }
  // Station 2: Dispensing
  //printCurrentStation(2); //Print out>> Current Station: Station 2
  //digitalWrite(STATUS_LED2, HIGH);
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Station 2");
  delay(2000);
  
  while (true) {
    if (digitalRead(RESET_BUTTON) == LOW) {
      Reset();
      return;
    }
    if (digitalRead(PC1_2) == HIGH) {
      if (needsDispensing() && digitalRead(PC1_2) == HIGH) {
        dispenseWater();
      } else {
        lcd.setCursor(0, 1);
        lcd.print("No Need Dispense");
      }
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("Processing:");
      lcd.setCursor(0, 1);
      lcd.print("Station 2-->3");
      delay(3000);

      moveToStation3();
      digitalWrite(STATUS_LED2, LOW);
      break;
    }


  }

  // Reset
  if (digitalRead(RESET_BUTTON) != HIGH) { //active low, rst when low, rst when pressed
    Reset();
  }

  // Station 3: Process Completion
  //printCurrentStation(3); //Print out>> Current Station: Station 3
  while (true) {
    if (digitalRead(RESET_BUTTON) == LOW) {
      Reset();
      return;
    }
    //digitalWrite(STATUS_LED3, HIGH);
    lcd.clear();
    lcd.setCursor(0, 0);
    lcd.print("Station 3");
    delay(2000);


    captureoutput(); //image from raspberrypi
    displayfindings();//finding from image processing
    complete = 1;
    break;
  }
  //  reset button press
  if (digitalRead(RESET_BUTTON) == LOW) {
    Reset();
  }
  while (complete == 1) {
    //infinite loop
    if (digitalRead(RESET_BUTTON) == LOW) {
    Reset();
    }
  }
  
  
}

// Helper functions
bool isLoadedAtStation1() {
  return digitalRead(PC1_1) == HIGH;
  //Machine vision reads loaded//
}

void moveToStation2() {
  digitalWrite(PNEUMATIC_PC1, HIGH);
  digitalWrite(STATUS_LED2, HIGH);
}

void moveToStation3(){
  digitalWrite(PNEUMATIC_PC1, LOW);
  digitalWrite(STATUS_LED3, HIGH);
}

bool needsDispensing() {
  // Replace this with machine vision result from Raspberry Pi

  return true;
}

void captureoutput() {
  // Replace this with machine vision result from Raspberry Pi
  //pass;
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("capture output");
  delay(2000);
}

void displayfindings() {
  // Replace this with machine vision result from Raspberry Pi
  //pass;
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Display outcome");
  delay(2000);
}

void dispenseWater() {
  //lcd.clear();
  lcd.setCursor(0, 1);
  lcd.print("Dispensing");
  digitalWrite(PNEUMATIC_PC2, HIGH);
  delay(3000);
  lcd.print(".");
  while (digitalRead(PC2_2)== HIGH){
    digitalWrite(PUMP, HIGH);
    lcd.print(".");
    delay(1000);
    lcd.print(".");
    delay(1000); //total delay 2000ms for pumping
    digitalWrite(PUMP, LOW);
  }
  digitalWrite(PNEUMATIC_PC2, LOW);
  //lcd.clear();
  lcd.setCursor(0, 1);
  lcd.print("Done Dispensing");
  delay(3000);
}

void Reset() {
  complete = 0;
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("System Reset");
  digitalWrite(PNEUMATIC_PC1, LOW); //at the right position
  digitalWrite(PNEUMATIC_PC2, LOW); // at the top position
  digitalWrite(PUMP, LOW); //pump not activated
  delay(2000);
  lcd.setCursor(0, 0);
  lcd.print("System reset");
  delay(5);
  lcd.setCursor(0, 1);
  lcd.print("to Station 1.");
  delay(500);

  // Blink all status LEDs three times
  for (int i = 0; i < 3; i++) {
    digitalWrite(STATUS_LED1, HIGH);
    digitalWrite(STATUS_LED2, HIGH);
    digitalWrite(STATUS_LED3, HIGH);
    delay(1000); // LED on for 1000ms

    digitalWrite(STATUS_LED1, LOW);
    digitalWrite(STATUS_LED2, LOW);
    digitalWrite(STATUS_LED3, LOW);
    delay(1000); // LED off for 1000ms
  }

  lcd.clear();
}

void printCurrentStation(int numstation){//active high for all limit switches
  int i = numstation;
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("Current Station:");
  lcd.setCursor(0,1);
  while(true){
    if (digitalRead(PC1_1) == HIGH && i == 1){ //check station1
      lcd.print("Station 1");
      delay(2000);
      //break;
      }else if (digitalRead(PC1_1) == LOW && i ==2){ //check station 2
      lcd.print("Station 2");
      delay(2000);
      //break;
      } else if (digitalRead(PC1_1) == HIGH && i ==3){// check station 3
      lcd.print("Station 3");
      delay(2000);
      //break;
      } else{
        lcd.print("ERROR!!!");
        delay(2000);
        Reset();
        //break;
        } 
    break;
  }

}
