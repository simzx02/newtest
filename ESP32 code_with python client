#include <WiFi.h>
#include <PicoMQTT.h>

// Wi-Fi credentials
#define WIFI_SSID "iPad"
#define WIFI_PASSWORD "ggvcryvct"

// Pin Configuration
#define STATUS_LED1 25
#define STATUS_LED2 33
#define STATUS_LED3 32
#define PNEUMATIC_PC1 17  // Relay 1 (Active LOW)
#define PNEUMATIC_PC2 16  // Relay 2 (Active LOW)
#define PNEUMATIC_PC3 4   // Blower (Active LOW)
#define PNEUMATIC_PC4 2   // Sucker (Active LOW)
#define WATER_PUMP 5      // Active LOW
#define PC1_1 34          
#define PC1_2 35          
#define PC2_1 19          
#define PC2_2 18          
#define RESET_BUTTON 27   // Reset button GPIO 27 (Active LOW)

// MQTT Topics
#define STATION1_REQUEST_TOPIC "station1/request"
#define STATION1_RESPONSE_TOPIC "station1/response"
#define STATION3_REQUEST_TOPIC "station3/request"
#define STATION3_RESPONSE_TOPIC "station3/response"
#define RESET_TOPIC "reset"

// State Variables
String station1Response = "";
String station3Response = "";
bool station1ResponseReceived = false;
bool station3ResponseReceived = false;
bool station2Completed = false; // Flag for controlling Station 3 eligibility

// MQTT Server Setup
class MQTT : public PicoMQTT::Server {
protected:
    PicoMQTT::ConnectReturnCode auth(const char* client_id, const char* username, const char* password) override {
        if (String(client_id).length() < 3) {
            return PicoMQTT::CRC_IDENTIFIER_REJECTED;
        }
        if (!username || !password) {
            return PicoMQTT::CRC_NOT_AUTHORIZED;
        }
        if (((String(username) == "alice") && (String(password) == "secret"))) {
            return PicoMQTT::CRC_ACCEPTED;
        }
        return PicoMQTT::CRC_BAD_USERNAME_OR_PASSWORD;
    }
} mqtt;

// ✅ MQTT Subscription Setup
void setupMQTT() {
    mqtt.subscribe(STATION1_RESPONSE_TOPIC, [](const char* topic, const char* payload) {
        station1Response = String(payload);
        station1ResponseReceived = true;
        Serial.printf("📩 Station 1 Response Received: %s\n", payload);
    });

    mqtt.subscribe(STATION3_RESPONSE_TOPIC, [](const char* topic, const char* payload) {
        station3Response = String(payload);
        station3ResponseReceived = true;
        Serial.printf("📩 Station 3 Response Received: %s\n", payload);
    });

    mqtt.subscribe(RESET_TOPIC, [](const char* topic, const char* payload) {
        if (String(payload) == "RESET_TRIGGERED") {
            Serial.println("⚠️ Reset Triggered from Python Client!");
            resetSystem();
        }
    });
}

// ✅ Wi-Fi and Pin Initialization
void setup() {
    Serial.begin(115200);
    Serial.println("===== ESP32 System Starting =====");

    // Connect to Wi-Fi
    WiFi.mode(WIFI_STA);
    WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
    while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        Serial.println("Connecting to WiFi...");
    }
    Serial.print("✅ ESP32 IP Address: ");
    Serial.println(WiFi.localIP());

    // Initialize Pin Modes
    pinMode(STATUS_LED1, OUTPUT);
    pinMode(STATUS_LED2, OUTPUT);
    pinMode(STATUS_LED3, OUTPUT);
    pinMode(PNEUMATIC_PC1, OUTPUT);
    pinMode(PNEUMATIC_PC2, OUTPUT);
    pinMode(PNEUMATIC_PC3, OUTPUT);
    pinMode(PNEUMATIC_PC4, OUTPUT);
    pinMode(WATER_PUMP, OUTPUT);
    pinMode(PC1_1, INPUT_PULLUP);
    pinMode(PC1_2, INPUT_PULLUP);
    pinMode(PC2_1, INPUT_PULLUP);
    pinMode(PC2_2, INPUT_PULLUP);
    pinMode(RESET_BUTTON, INPUT_PULLUP);

    // ✅ Set all relays to HIGH (default OFF for Active LOW configuration)
    digitalWrite(PNEUMATIC_PC1, HIGH);//
    digitalWrite(PNEUMATIC_PC2, LOW);//originally extending
    digitalWrite(PNEUMATIC_PC3, HIGH);
    digitalWrite(PNEUMATIC_PC4, HIGH);
    digitalWrite(WATER_PUMP, LOW);//active high
    digitalWrite(STATUS_LED1, LOW);
    digitalWrite(STATUS_LED2, LOW);
    digitalWrite(STATUS_LED3, LOW);

    // ✅ Initialize MQTT and Reset State
    resetSystem();
    setupMQTT();
    mqtt.begin();
    Serial.println("✅ MQTT Broker Initialized Successfully!");
}

void loop() {
    mqtt.loop();

    // ✅ Real-time Reset Button Check (Active LOW)
    if (digitalRead(RESET_BUTTON) == LOW) {
        delay(200);  // Debounce
        if (digitalRead(RESET_BUTTON) == LOW) {
            Serial.println("⚠️ Reset Button Pressed! Resetting system...");
            mqtt.publish(RESET_TOPIC, "RESET_TRIGGERED");
            resetSystem();
            return;
        }
    }

    //  ✅ Station 1 Process (Updated for All Four Cases)
    if (digitalRead(PC1_1) == HIGH && digitalRead(PC1_2) == LOW) {
        Serial.println("📡 Station 1: Requesting Input from Python Client...");
        mqtt.publish(STATION1_REQUEST_TOPIC, "Provide input for Station 1");

        while (true) {
            station1ResponseReceived = false;
            while (!station1ResponseReceived) {  
                mqtt.loop();
                delay(100);
            }

            // ✅ Case Handling for Station 1
            if (station1Response == "No Lens Holder") {
                Serial.println("⚠️ No Lens Holder Detected. Please provide another input.");
                mqtt.publish(STATION1_REQUEST_TOPIC, "No Lens Holder detected. Provide another input.");
                continue;
            } 
            else if (station1Response == "Perfect Solution") {
                Serial.println("✅ Perfect Solution already detected. No further action required. Process End.");
                digitalWrite(STATUS_LED1, LOW);
                return; 
            } 
            else if (station1Response == "No Solution" || station1Response == "Spill Solution") {
                Serial.println("✅ Valid Input Received for station2. Proceeding to Station 2...");
                break;
            } 
            else {
                Serial.println("⚠️ Invalid input received. Please try again.");
                mqtt.publish(STATION1_REQUEST_TOPIC, "Invalid input received. Provide another input.");
            }
        }
    }

    // ✅ Station 2 Process with Case Handling
    if (station1Response == "No Solution" || station1Response == "Spill Solution") {
        Serial.println("🔧 Station 2: Processing Based on Response...");
        digitalWrite(STATUS_LED2, HIGH);
        Serial.println("✅ STATUS_LED2 Turned ON");

        // ✅ Step 1: Activate PC1 (Engage Initial Pneumatic)
        digitalWrite(PNEUMATIC_PC1, LOW); // Active LOW relay ON == extending
        Serial.println("✅ PC1 Activated: Moving to station 2...");

        // ✅ Step 2: Wait for Limit Switch PC1_2 to go HIGH
        while (digitalRead(PC1_2) == LOW) {
            delay(100);
            Serial.println("⏳ Waiting for reaching station 2");
        }

        // ✅ Step 3: Deactivate PC2 Once PC1_2 is Triggered
        digitalWrite(PNEUMATIC_PC2, HIGH); // Active LOW relay OFF
        Serial.println("✅ PC2 Retracts");

        // ✅ Step 4: Activate Blower and Sucker (PC3, PC4)
        digitalWrite(PNEUMATIC_PC3, LOW);  // Blower ON
        digitalWrite(PNEUMATIC_PC4, LOW);  // Sucker ON
        Serial.println("✅ Blower and Sucker Activated");

        // ✅ Step 5: Activate Water Pump for 3 Seconds (ONLY for No Solution)
        if (station1Response == "No Solution") {
            digitalWrite(WATER_PUMP, HIGH);  // Active LOW relay ON
            Serial.println("✅ Water Pump Activated for 3 Seconds: Dispensing");
            delay(3000);  // Water pump runs for 3 seconds
            digitalWrite(WATER_PUMP, LOW);  // Turn OFF Water Pump
            Serial.println("✅ Water Pump Deactivated");
        }

        // ✅ Step 6: Reset Actuators (Turn OFF Relays)
        delay(2000);
        digitalWrite(PNEUMATIC_PC1, HIGH);
        digitalWrite(PNEUMATIC_PC2, LOW);
        digitalWrite(PNEUMATIC_PC3, HIGH);
        digitalWrite(PNEUMATIC_PC4, HIGH);
        digitalWrite(WATER_PUMP, LOW);
        digitalWrite(STATUS_LED2, LOW);
        Serial.println("✅ Station 2 Process Completed");
        station2Completed = true;
    }

    // ✅ Holding Condition Before Station 3 (Using While Loop)
    while (station2Completed && !(digitalRead(PC1_1) == HIGH && digitalRead(PC1_2) == LOW)) {
        Serial.println("⏸️ Holding Before Station 3... Waiting for correct positioning.");
        delay(1000);  // Wait for 1 second before checking again
    }

    // ✅ Condition Met, Moving to Station 3 Process
    if (station2Completed && digitalRead(PC1_1) == HIGH && digitalRead(PC1_2) == LOW) {
        digitalWrite(STATUS_LED3, HIGH);
        Serial.println("📡 Station 3: Requesting Feedback from Python Client...");
        mqtt.publish(STATION3_REQUEST_TOPIC, "Provide feedback for Station 3");

        // ✅ Wait for Response (Blocking until message received)
        while (!station3ResponseReceived) {
            mqtt.loop();  // Keep checking for MQTT responses
            delay(100);
        }

        // ✅ Response Received, Process Complete
        Serial.printf("✅ Station 3 Response Received: %s\n", station3Response.c_str());
        station3ResponseReceived = false;
        station2Completed = false;  
        digitalWrite(STATUS_LED3, LOW);
    }
    resetSystem();
}


// ✅ Reset System Function
void resetSystem() {
    Serial.println("🔄 Resetting System...");

    // Set all relays to default OFF (Active LOW relays)
    digitalWrite(PNEUMATIC_PC1, HIGH);
    digitalWrite(PNEUMATIC_PC2, LOW);
    digitalWrite(PNEUMATIC_PC3, HIGH);
    digitalWrite(PNEUMATIC_PC4, HIGH);
    digitalWrite(WATER_PUMP, LOW);

    // Reset LEDs and State Variables
    digitalWrite(STATUS_LED1, LOW);
    digitalWrite(STATUS_LED2, LOW);
    digitalWrite(STATUS_LED3, LOW);

    station1Response = "";
    station3Response = "";
    station1ResponseReceived = false;
    station3ResponseReceived = false;
    station2Completed = false;

    Serial.println("✅ System Ready for New Cycle.");
}
